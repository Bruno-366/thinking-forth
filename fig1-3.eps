%!PS-Adobe-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: run.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 288 154
%%DocumentFonts: CMTT10 CMEX10
%%DocumentPaperSizes: bbox
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips run.dvi -o fig1-3.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2004.10.13:1318
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro
%!
% PostScript prologue for pst-grad.tex.
% Version 97, 93/05/12
% For distribution, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.
%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).
%
% Syntax:
%   R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill

/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBlue ED
  /LastGreen ED
  /LastRed ED
  /FirstBlue ED
  /FirstGreen ED
  /FirstRed ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastRed FirstRed add 2 div
  LastGreen FirstGreen add 2 div
  LastBlue FirstBlue add 2 div
  setrgbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
    MidLine { GradientLoop } repeat
  } if
  MidLine NumLines lt
  {
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoop } repeat
  } if
} def
/GradientLoop {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Red Green Blue setrgbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Blue Blue BlueIncrement add def
  /Green Green GreenIncrement add def
  /Red Red RedIncrement add def
} def

end
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro
%!
% PostScript prologue for pst-coil.tex.
% Version 97 patch 1, 98/06/02
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { /t ED t sin AspectSin mul t 180 div AspectCos mul add t cos
lineto } def
/Coil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /ArmB ED /ArmA ED
/h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED x0 y0 translate y1 y0 sub x1 x0
sub 2 copy Pyth /TotalLength ED Atan rotate /BeginAngle ArmA AspectCos
Div w h mul Div 360 mul def /EndAngle TotalLength ArmB sub AspectCos Div
w h mul Div 360 mul def 1 0 0 0 ArrowA ArmA 0 lineto /mtrx CM def w h
mul 2 Div w 2 Div scale BeginAngle Inc EndAngle { CoilLoop } for
EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
TotalLength 0 ArrowB lineto
pop pop pop pop } def
% DG/SR modification end
/AltCoil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /h ED /w ED
/EndAngle ED /BeginAngle ED /mtrx CM def w h mul 2 Div w 2 Div scale
BeginAngle sin AspectSin mul BeginAngle 180 div AspectCos mul add
BeginAngle cos /lineto load stopped { moveto } if BeginAngle Inc
EndAngle { CoilLoop } for EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { /ArmB ED /ArmA ED 2 div /w ED w mul /h ED /y1 ED /x1 ED /y0 ED
/x0 ED x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth /TotalLength ED
Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
sub 2 div dup ArmA add /ArmA ED ArmB add /ArmB ED /x ArmB h 2 div add
def mark 0 0 ArmB 0 n { x w /w w neg def /x x h add def } repeat
TotalLength ArmA sub 0 TotalLength 0 } def
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro
%!
% PostScript header file pst-text.pro
% Version 97, 94/04/20
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc
{
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow
{ /String exch def
  /CharCount 0 def
  String length
  { String CharCount 1 getinterval ShowChar
    /CharCount CharCount 1 add def
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar
{ /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
    currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def

end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: 09fbbfac.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmsltt10 cmtt10 cmtt12 cmtt8 cmtt9
/TeX09fbbfacEncoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi
/Omega /arrowup /arrowdown /quotesingle /exclamdown /questiondown
/dotlessi /dotlessj /grave /acute /caron /breve /macron /ring /cedilla
/germandbls /ae /oe /oslash /AE /OE /Oslash /visiblespace /exclam
/quotedbl /numbersign /dollar /percent /ampersand /quoteright /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon /less
/equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N
/O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash /bracketright
/asciicircum /underscore /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l
/m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar /braceright
/asciitilde /dieresis /visiblespace /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /space /Gamma /Delta /Theta /Lambda /Xi /Pi
/Sigma /Upsilon /Phi /Psi /.notdef /.notdef /Omega /arrowup /arrowdown
/quotesingle /exclamdown /questiondown /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /visiblespace /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMEX10
%!PS-AdobeFont-1.1: CMEX10 1.00
%%CreationDate: 1992 Jul 23 21:22:48
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMEX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMEX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 41 /bracerightBigg put
dup 111 /bracerightBig put
readonly def
/FontBBox{-24 -2960 1454 772}readonly def
/UniqueID 5000774 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF5B8CAC6A7BEB5D02276E511FFAF2AE11910
DE076F24311D94D07CACC323F360887F1EA11BDDA7927FF3325986FDB0ABDFC8
8E4B40E7988921D551EC0867EBCA44C05657F0DC913E7B3004A5F3E1337B6987
FEBC45F989C8DC6DC0AD577E903F05D0D54208A0AE7F28C734F130C133B48422
BED48639A2B74E4C08F2E710E24A99F347E0F4394CE64EACB549576E89044E52
EABE595BC964156D9D8C2BAB0F49664E951D7C1A3D1789C47F03C7051A63D5E8
DF04FAAC47351E82CAE0794AA9692C6452688A74A7A6A7AD09B8A9783C235EC1
EA2156261B8FB331827145DE315B6EC1B3D8B67B3323F761EAF4C223BB214C4C
6B062D1B281F5041D068319F4911058376D8EFBA59884BA3318C5BC95684F281
E0591BC0D1B2A4592A137FF301610019B8AC46AE6E48BC091E888E4487688350
E9AD5074EE4848271CE4ACC38D8CBC8F3DB32813DDD5B341AF9A6601281ABA38
4A978B98483A63FCC458D0E3BCE6FD830E7E09B0DB987A6B63B74638FC9F21A5
8C68479E1A85225670D79CDDE5AC0B77F5A994CA700B5F0FF1F97FC63EFDE023
8135F04A9D20C31998B12AE06676C362141AAAA395CDEF0A49E0141D335965F2
FB4198499799CECCC8AA5D255264784CD30A3E8295888EFBC2060ADDD7BAC45A
EEEECDFF7A47A88E69D84C9E572616C1AC69A34B5F0D0DE8EE4EDF9F4ADE0387
680924D8D5B73EF04EAD7F45977CA8AD73D4DD45DE1966A3B8251C0386164C35
5880DD2609C80E96D1AB861C9259748E98F6711D4E241A269ED51FF328344664
3AF9F18DCE671611DB2F5D3EA77EE734D2BED623F973E6840B8DAD1E2C3C2666
DD4DD1C1C9C622FAEAB9D3E54476B49A2A026565F10A840322879C3CF21DA87B
325636725FC30E5BFFF1740319E92420D38BA957EFA025323B6E1F779577B508
CEDE06BB6F282126C5251360A5B48A1A71CA62ECCCFA4B17F8C652682D1B45E0
B497C7D54545E3F42FBD33790A05327B830B3CFF1E67A3735E3DD14D2BE2B733
00A248D419FB49656C54E50B7E61419B4E2924419C7454AC7A6C5AAD25CD1BA5
0073E38C95556D6A2070E0F7FE5B6B95EAB7B6C20A498C82CDF7CACCB46A97C7
5DCB481209E478434C3C395093B5C245EC55D40F709455D9FDC4902B90001155
2577508FC917EF2E6A1E2AAE89EA268539273948307DBFB05D3DF45A9CBF5CAC
65BF0385060D6A967FD36BB2AB491E5A291D04522F26FE517A834B9F01ACA463
EF85B2FD2D5953E8FB5D2CF8526E526D92AD2A0F7DFBB7B4A9B66EB7FDD0F83F
7BCF4C2D98189B692BA40904523FECBFEEB071640BB0D649F725095607775A5E
92E5AB27840196A12C5176D38F766113FDBDDBAC5C603A3C34CFAF432EA7A420
ED52AAA6241139B3CB045C9B3C4F746F63DF21ED0A467CA2EF1915C74405846E
686801D0846C2E019A2B9188DDA8140F7BB765262C086B52590C4EB8DF50BE34
EC0119F82FAD84365CC6F3CB0D5257E2DE5FA89591673295B7DCEB28BA52D3DA
301CAABAA86887239BC4BC468BDCA56A5DE8D3EE1C4A130322F21928B7C53DCA
E042BC176EB707FEB861FAD6B0064F5070BDDF679F7A5ACA2AEFDA76EBA560DF
45E747C6AC182290A66875601439903DCAAF66F857A143FF22FD2D13DE89C439
EC7A5F7573F6779F2FF66FED6D0F50573295C67AD48F32CA1F6E650C4A0ADCE4

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMTT10
%!PS-AdobeFont-1.1: CMTT10 1.00B
%%CreationDate: 1992 Apr 26 10:42:42
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.00B) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMTT10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
end readonly def
/FontName /CMTT10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-4 -235 731 800}readonly def
/UniqueID 5000832 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5F00F963068B8232429ED8B7CF6A3D879A2D19
38DD5C4467F9DD8C5D1A2000B3A6BF2F25629BAEC199AE8BD4BA6ED9BBF7DABF
D0E153BAB1C17900D4FCE209622ACD19E7C74C2807D0397357ED07AB460D5204
EB3A45B7AC4D106B7303AD8348853032A745F417943F9B4FED652B835AA49727
A8B4117AFF1D4BCE831EB510B6851796D0BE6982B76620CB3CE0C22CACDD4593
F244C14EEC0E5A7C4AC42392F81C01BC4257FE12AF33F4BFEA9108FF11CF9714
4DD6EC70A2C4C1E4F328A1EB25E43525FB1E16C07E28CC359DF61F426B7D41EA
6A0C84DD63275395A503AAE908E1C82D389FD12A21E86999799E7F24A994472E
A10EAE77096709BE0D11AAD24A30D96E15A51D720AFB3B10D2E0AC8DC1A1204B
E8725E00D7E3A96F9978BC19377034D93D080C4391E579C34FF9FC2379CB119F
1E5BBEA91AE20F343C6420BE1E2BD0636B04FCCC0BEE0DC2D56D66F06DB22438
452822CBEAF03EE9EAA8398F276EC0D92A7FB978C17805DB2F4A7DFBA56FD6AF
8670EB364F01DE8FCAFBAF657D68C3A03112915736CEABAA8BA5C0AC25288369
5D49BD891FABEFE8699A0AE3ED85B48ACB22229E15623399C93DE7D935734ADA
DA7A1462C111D44AD53EA35B57E5D0B5FC0B481820E43222DB8EFCD5D30E15F9
BA304FA879392EE0BCC0E1A61E74B3A1FC3A3D170218D7244580C7AA0DC65D19
741FA5FE6F8CBF60250ACC27454BBF0897CA4B909C83A56672958752ED4B5E79
E18660764F155E86F09EFA9F7685F2F5027EC85A775287B30E2069DE4E4D5712
E7D033481A53A2702BA7542C71062173039030CF28D8B9C63B5596A9B42B33E7
D922944A38713383D3648A4AF160A3B0C8F3379BA4372BE2E7EA49AABA75AEEE
C5DDE1D8BF68483C3D21271280ABB91D54CC819680322EAB72E1250A760BC8DC
FF798F2ABFC4F3539392985C4CB324B00072295FC160818BB0355FDC4F12E39B
984826450553E3D271F03D8DC2D12A92A4D32034FD16DA13B876D88C8C097384
46D8D7E41CA1A8979F9B07EC3337E70CBBE3A377235B04C79BBBDB66CE1C1A41
89DAB7CE91F2FC0CAF6DDAD09992D56F72299068192610EE3DE5DB7CF6366B4C
D74F414484DCCDBA449BFAADA39D0F27574E604E31CB513B18E3821A33076151
C2BCB6E957C77A0AECA48C587ABB5E8C7624D56B32F80BBCFDC874AAD6EA5119
C9B06886F08CC7DE5400E0F52B07483FD4BAF26C1556CA27B259FF3DDF71131F
DFC05D8B14C28F2073C460B5011B76D84F7917E919E50FEF563B5DEBC5CE6923
ADB72392C98D04EC033C9F923DBBAA571FFCBE6538892DCEEE4724C8FAFBE4B0
AC53D06CF1F8FE591E993B9791B23E87D60DC64F872A991587E5EA4D285E26A4
52F417D276CC51B38C7B2D4EBED072E2A30BCFEBADD17A5B826675131693DADF
B526CCC525550C786787E516422AF064230E94CC4A541EBD28FD4BEF9A8AF203
65C9DCD25EA779EC7F2C98F74B09DE2F5F30772933905DDFCEEE2B3B2B30BD76
307D8AB146549AFF7CC8C4FD9CAAD29EFDF94D57B56919F96605E9739136E9C9
E5B4450986908EC3E769861BB34154B0E15DB85CFCD817A52A096AF386A300BC
180F1373EFE23EEC5F3C6EE76EB0D82C3973D6FE77F7AB2E72FAB0331A69C1B2
450D6C16B59B03EB254A636665C7E1F0DC9F612A25DDAF963EEA0F385FF6AE38
073D3AC106E06F828E907CE0E48175B23985F185111EA443F96BA3D88A220EBA
93FEB78732026C8F710B467AB3742C6FAE4E133DC1A8FCCF41B71CF582343250
BA953457ED94ECDB043188968A9B764661916B832E25CE49A8BDC59F9562BD34
060A16A9EC80491A7183FDF703FD3FE2535C717ED5E18A4CA2E1F741279BA4A6
BBBA916602EA33EE9801BEFE7038D2D2FC56218804C47BE99F766EBB42E9473A
BE2F9E0CEF22A1F4E3B2301D8595B707FFB6108563E9FF1F8DFB56041D8EF2AB
975F04A6CB582B8C11CA260465A639AEFE68A1B5C6FAA5B5A936E99477341920
5F90796FB0CD95E2E3A1991C8458211E3953BFD1058D796E8431F0E470B3749C
7001AD6476D6030926ED4A9088FC1078306A95A5333B8AEA0CB71FC9E8FE2CDC
69C8E979C4B49ECA97415687121F101671F20D2AF28EE9638E9B001950ADC19D
9CD20AF8E10391047ACA7F7790522C8C69B3C756B43F5F9A3F896533DED92B74
07713C05ED5B7AA6A8AF0787F5EA70CA2BD4C39F9185AA5759AB140EBBFCE79E
B3AB761C68ED3B34E93F0F665E7986618D4E600656325E9CCE1DC22C981CA08F
706463356DE5842E488A28E4C3920BB7FB0C6EB5D2FADBB7E54C5BD47C488C5F
9ED4CD868C871D00BFBCA42F1BDDAECA0C69DA781978A7BE1F9F28BF589783E7
4FCEF4240B0F65CA1D6231BA60B37CCDB45DAE3F8E2A7F4387A585F404841DF5
30ACA90112336C04EC050C1CF647857A1BB2F3166B767F03651EC90E3C553091
CF0EAE5D31EB752880527BA1466965BBD227644D24CFA095A3C1FECD8951521F
5FE740676445253F8555D7CD81EDF8445E06F95249650BF7ADBB801E9DABFE67
4F6CC88C4D8D67ADC97763A0B693B0A4C0C1371862126A3C44DCF3AF347BD215
B60BEA10F595020F7327D511267C757EEAA78498537CF09B461A930E25690549
227F6A3561ED78C38F96D44195ED69DCD7A271E1D2715EE3F79773B66AE0523F
8671919442A007CA3F678B42C565994316C00DB94CEE4D6992AEC1C8CD880996
BFDFF8E5542090775C71856CB32AE9BB63AE5F22F2DC843391EC616A2E2331B2
CC63A9D4720EC6CD6E61E66A74A3009687E1DFE4DA0C896086E23AC1557866FF
05A39765DC3FBAB1F3B8607E8758A35C84CD5905ADC8BD9C3D85AA9883F69CC2
2F7B049E8905B43ABF5B4BB0F196D048DD2F10FE54ABED76502F21EAF0EE9104
2943B9664229F0DC497CFE649FA8CCE8A2D497EE74D0101F475065CE1CB0D476
69FD4EC79311ADFFB599B5A9AD1BF0425605253B83093AB7A82938DD9E8CBEA1
DCBF56E187B9C498475A6A738994DD5A8E68FE87ED0141B7979FDF4DDF9BA6FA
5D6ED14CFB6FB5179917898C28BFBD4CBE4B90F90DEFC920BEB35908A9D9AA14
D2D1FEEF81A92C265374D7A0A25857953FB6BD71E0D35901FDF3DFB903E20426
AFA1DA8D4FCF2E148E1F7A9BB184AA1A17C4D496B79FD46361B99F03C14F70B0
0F68DDD988E27E025017B5691E29E66540FA4AB4800A9FFC69B077B489CD905A
685DEBB5D8DEB01317CDBD948BAD1A5CAB0D328A50634CF2F3E6CAE4C3FC5C13
C7DDC488A19B8521ACCB55F382309128627D64CB1B43398D72B158A8E8F53E94
9BDBE2565EAAE7133D54D621ABACED7DEE0F9024AA8BE4413DB1D99E9D5975FB
43F0DF5DC2AC68D77B8CCE7F519B557AED0503BA3EB9263E5B432D8746F81E78
146406480285CC01643A1AA2FA7484F3D8BB928D4887B7D9AB105864E1660EB3
B2B6A1919C8E22760A23260749C459F345931CD3260F94289AABBEC206211378
C1E73BDD61674CF2D0C2D90AEF611AC7409C2C4183238A2B238084C12C55E6F6
24CF8E5647FF29044A682155F65AA68BC93AB53EF6C6AB876C24AFFB4A44B111
E17953D1B9A9FAC8BB9BD65669D29A16AFBDCAF350149D7B7C06F5C3BB0236AB
F820FEDB050898E5BB590144E0408F1F5B857C8B0B9B3D24790DE8AD5D8BAE9E
AA6847EE387344EC4C25497E8FA99EC7861177FE006E394CB0B3702ED662ADAA
12B663F4B524558BC1AA94FA533DF43853C1690BD8BFC7DD35701F56CC5C7752
E1CDFC36C51B3319E826347ECF0DB151A982CA2218334405D0F8E67358676D35
FA7474DED44D575A7DCE5461AFA525FEE37E3E3254623C62E56703566C8C3BC8
9B7BA7105ABC575F10281E47807D2450A09B9B5A4755984AF415EF8DD9013278
4B5597F79AD91F9A8D0D84D544447F06B6D52BE571350A65503D56E373AF901F
66866465C2230A668272F9D954A13738E8846DF8C75987DD1D29F5995783BA73
38087064058ABC3BDB26E2DD2AB2965575A2E82815B338453EAF46807D9667C1
FE5B3EAD850271E5F549516868444A0D551E32B256554A4D47A36DF4A19E93E9
AB69E1F6C083F7D5B05498EF4AF7D43332A22865F978CDDCE93614F7D2F6223A
9325E0E664B6EAD5193DCB3858DC0B6500E413E522CA51910F91C2D06851F33D
EADCEA9A5A833EB64006381578DFAA17B1FDE0DCFC2A3B21C5DA639DF1E44587
C67E3DFB07634008DFE13EC25438BFB2AA16861C1353764D1DED7451C67EA4B6
486E615D15457A218DA87D56479F3914B34D0CF89D3388B5A0BBADD192D96BF3
25C980FBD4471D0320F127DB22D1972F98FDDF28F78AA2D7D65F1DADFC6CCD94
E78C634C4C778095AEF09F63C5A63850868A506E37F016DB8A2EB7D38EFC6763
A81FB2E064777DE86D07A011EB837E8EE1F41A6C809A35374B32E659E46ACC58
A2061CB5A4C909518167150987887A27268A0C0949C50440CA299B6D1241C32B
73EE5530AD7109423B23B3E06478B8C0D2F519A1A48D585194555DE4E0C9AFD9
FA9197A5C186F58F668DC76C13F5638A3595D613FD7479FA7324E57AB9AF1919
C4B2AB0080F8C13FE44D7C9B6F230E3F9C1708F91AD7492204A87435D1425CA1
43AB63CCD886D81B6878AFC4A7D44BA9B28B20C1D3CAC50D653CCCC13D3DA519
66FC9CB6E5A478C02B3740E818DEA2CDD55B618CAFF6B6690A82D46343E6628B
00B053FAF8D0A89FC4C179F8C2E5784A40E1B3339DB38CF17C2F0B6989499067
5163338D27686B0208ADCC25E15517729BECF1E086BF6127437FA27A9A3215D7
E8BB819CE3845DF6215650E50FC0423997C5E06690813A2E86B849A9C71A33FD
89ABAF85AEAE03672A6B208EA7DA9E7667CBD3A909E89E731DD1115B6CEF473B
769B245D08BA6F279FC810332B15DFF8BB942E6110848AD943D9C0B09F14B2E8
0140F60CDCF3BDD56A8AC16D244B67FC29A43389FCB1D00FCE70DD7029FEDEB5
346506724101307391534BADEF1AEED5EA4917F703F00F56E1B10C3A3174D85A
FC3157AD9270C49E4D20CE8B302731ACD8EC8EDC827FCB539BBC393429081EFF
BDFB33CB06E5581979E3C6B126C45BAF09C3015F882D05F700F10AEC7C2CFC08
5A9C39FF2B68F6524D53350A5CB0FB1794641D8B716F3981E7721538B2525076
FD19F6CACC0A2481D48EFE5F2A47A97729380EEC700BA22AD020A9AD0107CCEC
F17C35587F8552E6A33530DEC395703BDA19616CE93092DB367C4F51AE1BBDA7
F3A3D5C831CDE5DAE66A6F97AC0F150048983D1B9858C1C1278A281C38EA3D56
6DCB882A4F88BC5696F02E62E420AEAA9793AF155BCB1A28FF7CD4F174FB9A38
3FCB9B15D6390A2B199BF6AE56CE4F10CDBB7B26021893009FEBDBCABF84BCCE
A23BA571F09E0061A22CFF4D27DCEB0027309211623F2B7F4FB94094B05ACE57
E3E83A1A8CC6E360AF3F8C1B1AA2FEB580CDFAB304598E8FBC61AD838E3A0159
A5FD2DA12F2345878E4FFD04B2924549468E3785B8D46FE45DC4B805F18E27F1
A1F610903D179308571046B5EA767D0134C568AE63B15570F2A46C3877BED6B0
F54003126B38D92ADE5480F9BF3F39A20D1B9973DAEFE2429D0E01160ADADAD2
53E22D6027F87EAD4A6A2D9490AD0EF6B6D59A3DA501F156C4BC91FF2C204DBC
5588AC36AD4E23A7919BE367F1F42B0AFF0549C5D5314086B26A8375FB638C33
AB4D07C858E33FC069E06E65435C26437EE3424DD4D786C2830C64D9E4E4141B
E4BAA8E0EC5B275AF76D280FD8380D4AB9BAF671B02CA6A7C28DF788FAD7201A
C0345F0D9BC7892E996C78B1F6CAD418FF317E039C86A48DC4EE9DF2C165356E
2624796F18774A66C0710DBE94A47B2370BCF5DBF707BF1223500519ADF413D8
F5DB3FA339356EFF9E9F16526576A08A38635DA1648DC1AF0E20838256176F67
8B91B878A00687B0B2FBFA5DBB07AD37C04E7E7F117E135A84B76494FA8B19AD
CFFF4DB779B953928AEEA1BFA20F6FA8C46D871BA9E973C52A3E6288755038BE
FDE5E2BD2B0297AB5B18EB2F285BE46CB3C8601A955634B029C54B45C80F6F4A
B1518DD74A7029EE3BD4F5C850F0AF6CFF70EAE96F678A6B0D24FADECACD0C21
50AFF1A485E1F2845D565FD5B7AB1031FD7DDC17B6AAB95C75E0C8A7FBD0A1E4
3428E9CF601B697F14CE05E6853F92BA0FA6AE36A2857CD7B810F9A5B7D8D5E3
C37BC8D1E5336C4A7E77BE2024E522251327BDE7A29DC7CD1D5F781A8224311E
6B688BF2168E910E4E96A2D036397B10AD5DE15B2EE05856BF829415CCB24656
063A6DAF92E9ED1A972920B636B560D55A7D26252772C46C663F6CBA77EF7025
674363205A3C8D114DD912AE24C81C1E9102CA9C1E3DD5B876CC655DB566EFD0
A957436D83C1CDA8FD745C05EB8B3FE67098163145E227E2C6CEB704C6022C3F
E69FACAFF5B31BDF6D8CB25C58A6E5D42F9ED9BB4DB3EC8706BB05A7FDF10133
BE0EDDC0CBD132C9A49BFE69C100D91080852F3DC280F5FD94F5BB23F5844884
9DF02F2AEBEBF819B03F4B895C9C7F985F99DB05D69D93B49DC4A6AE4464B9AF
14D488C8D083320CD906C8E187B7B8AD46A4A07AF3C8FC64A61A08506327776D
0DEF61F782DC8D22E58B8CE48986D151994F776609A2D3D17FF75F498B91708D
8C858B09DC18A46F20814557B09D26CF20773C922762A85D44BB9EA13FB7E6E9
E00E9768A55469B8396349C5ED455BF69EE6FE91B94A1D55B2D123BE76BCDB9F
FB4E39B7EE8CCC452AED0B7594BB1D42C723EA82ADA039874914FBFBE426A49E
A3A4312BF4C5E640755545F036CC28547FA30D0301DA610B075A09B682BCD50B
5EEA43967282DDCAF5BF3E999A2E232B57C0387C5B45C8CB1F6AB4E73899C874
466C97DEB61D67636BD4122013755CDA178C24BCF4A7B1CFFF697F33B693EEEC
A313E62DB020CC454006032D925CA55423A7F1292A210A4F6FF76FDD72D7DE7E
938F68C33DA80B6850EFDBEC4E4D9B4AF375ABDAA45007928ED028A3BFD5EFC2
4455926F47D637DD846D3FCAAF90164AFC8CE3364B36FA94135F89C2B71AD566
4D770D801E97C7369554D963D28EA54A3EF9625C7DE0C291621D95DDBFF1C103
FB8CB19F697C497E09051DC37C75BE77B84F577D3EE450B4E039DDC6B9DA97B5
ACB14811D7E92BDC71B5CAFA2338B5EC147386CAF1FF8BE1677ADA2F6EF6819C
E685BF1593087D2B6D1077B118BCC6452D92DBB18858980261D957B6E4F5E738
54267C00A188F337ADF58E918BB358D2463268183A93022B53ED126E3EEF1FE4
9A299F37D52A8CA18528241110CA44D5D58C332490AF388779A48F96267737E8
65109AF6EDD659EBB00D335C6CF134ABD80239D1D639748BA7107D7A145FA3A8
D8F19B79C8C710A9E02C9BA137DA003B8CE1ED106B299AFFF92940CC74F29418
291D3EEF4FE338587C3F36E55636D1F561E863123A77EEB248A0CD2E70156292
4FF8A99C5E1D7832C8F84B6098F1407212130CB66675BFCA5984464D967E934D
C2919D91ACC3469DE9B1E9800760E1469885F7CC0A33618A131BF5846BF43715
529F11C4410C5D9F11C1715E71A753DE86F8E8F66012A50CC203CE4939A96FDD
0F438E4722323C1ADE05118636EFD2B6C87AEA58081752E86C39461BEFC0B618
6F75A29D53006EB9E33AD6E09547D3BB0F24AEEA91A26E037160EA0AA86D34AF
922BC99A0CE33044B3A54FC00A4343C437E6912B6394EBA2F4E4D8705D50F6D6
4E4ACE50BFD1A8377808BF11F3C7B50D61C030EEE692193E547F8A50FC5EB94C
26645E98D7DCC5C32A28255961056047D7B63E9B55D82543D20E185A4DF8CCB9
D7DB6EC5A2F1C869BB91CC399F3F768747787BCC63137EEADDB624636DA14E3A
7EDE8A7774298BE968DA4CA21A183871EE82E377860CACAB8AFFD4C365E69776
0215B3DA48D0FAAED31C2113C29CB8CCB27A39B4558365AD3A65C0155C933BEB
5CF3AD89F6658B4E14C7279FCEED8C05AC9ECEDB67DB2681C94E812CAC98D5FE
5B07624C3A75C93B834314E6C0AF878B3BA1CBD6F37CEF106D34CD6B2CBE1A1F
42BD8F88A2D68A669B670D250E89FA2770585EF8E04282E0F99DA7D9FE6C49B3
B0192D563353BE63BB25E2A83E89DD4FFB201FF4D5585622F29C70FDEA09EE5F
6638D02DEAFBC9034EAEFF8A67DFCE00B06C323216DF595589035D4857FE01B0
27EAEB9595436B0E95C185FDD36AC2EC382425EA17AB327CE250177B1B72FB56
CFF3AA4F62E39D9677CBC17BBECDA92A866237B09BA741FFF126558B4A28DBE6
36F279069A3022DD38387797CC1B921F8C62745C1C3C0D0208725423499AE624
325F2A813F4485E5325EB85551F4BC5C2EFA7C409927F9F69EED5E70C676FD76
DFDBBFB0E135B42F1E6E1B51E2251B54FBA3F3706D99915886C4300AD2B5A12A
2377EF6DCD6E2CA2B71C4E47C90DA0D54C803FD1E05953EB4FE7236B5DBA46E6
8F0C477724B42BC952BF48F287B4ACC5F204EB95EC1123BBD5DB2DA3259D517C
EBB878E8CE1A658F256E12BB490261F1E5FF61B022B194FFBAF7FC5906A14EC8
36F2F5A63F7DEF5FEE193E11B68FC92CE958772DE5635F4FC1DF306BDEFBE7E8
7CDB344DEC383D14FE72EAEE1E534422DF2705DA927FB5F238E97FD6DC6223AC
D1E388CAC04BF4432B085803D65B712D1D378BCAAC0AE4DE19F6EA21BF8E4FD0
4603029EEEBA3E16ABA994BC1630D832B2C6ADBED3A919C19317D83B3C3CD071
07A4813979A97C8EB0B0140DCE9D0A8DBAA32CF9B80D2F189FE9C87330F78B73
F5B8F9DA6970947C7EF837B1F73DF62A207A8B8F5B3441950556A8BD92837E07
B3F07A2B442B42F1D4D31A183AB1F1E735E2C62583F81288D909108D9A19F1BA
97A4B259B78E759957C93BDAB93F8BD4BF982280D14A1C3D2B8FAC25D90FB0D6
0420B832EED34B1C47D8F073CA8CBAF01B5A5B636C12F374408666BBF6EB47C9
D4233F08AEB1F058E42403829784A06A584CCFF216A33A28406B0525EAC8AFE2
6F233FED68C1C3314508F86EE53639C99DFCA51445854B9C90F4602846BBB68E
1C4260E34FA76F7088FDFD7E535B2661274E859094631B9D1A78D384234F6387
1B492384C0A7093132D99F1850050E30BA630B6AAEDB87272695B9119B5BB31D
2CF55990F2A86EB9497751B8EDFC8557FCC50DDF15F4309904C15BEA16FD46A0
95679F1675E3440860FB76C30F2A16BF51E2311B33DEF176B0949046DD1BFDFE
E5AE73A2C165D774F933BF552B7AB202087115ABE87322BE74C29F8367B4830D
94BBD6FD7CA4A06A48F717C16FECB95FE0988925F11F00BD58FCBEA4CCCD545A
94ADB67807BAFB4314153ACD966DE0D99DFC963DF86F5BD4E7A3C2933E3E63FF
54BD273B703FCCCE2CE46E1A8A12EFE46912D0CDE33067448EF64DDBAE6F0EE4
44243E75B73DA96C335BECCD17EA8E5A3A966D5BD2577E435A12B5CA37A3236B
A3DE46EBA94616416A59C4E31702A4ED15262CB4BC9DE992C5BAB975B311A77D
9940DB12E8985100A00B7E8C18C750E67517341401829524BC9F7C6D470718C0
3E5D8CBAE3F2624EFC0905393F305ADDE4A756C77240B6AC7F4180B45EEA3486
2A1E2948E531B7A6DB6025B112F2FE38559D4ECE1D695D0A9A74D975F3787348
114F0C22913BFA0C41380944F4ADA24A649EABEEA327A8D26CA677F47A9A1B49
EAA1E2F9AAA7D82F0D3F9902CE430A3030E3CC7FA7280B78D2306EDA74D4587E
3D5382925A789B6626A0A737EE61023C32D31853FB90290911C7DF8C53A955BB
DC62725F3A7B27E5A8638BADDC56D9743A24F95BA7C3AF76780C1BCF5E878468
2677422B28944E9901EAB605F96DDDF96DBAF9E416BCAB27FE543556384BD9D0
9AF3C9D9183D57BF6496CE0CA9D9B57211EE7A4E5E3C9881BE47C4C5B35201BD
E3254A72D290BF311E035FF28908E6C18A3CCE6BB97B2931F7D4D73815C616EA
ADF10091F0D40C1E1FEA95C97346223D79E7E29103DE97DD4DDF2A8BD12FB3E6
23982AC5697AFCE72DAB3F3599D840DB44129592B4A99C53C29310B70FB2C70B
1B5AE5DC0C543AFA1E3B36CF9BD4671833399B18B448F586EED97CE3CC2A06E5
2A59DFF4211CD21C4952068770C71C73FBA887DBFBA532EC8EC03A0A3FA161CE
356431699B5032B8BA07B30080251BE13361282A2BACB698A85D95D821928447
1588BDF1BD5F99B2EB31852B6D2579FBB998810C3753251F3794D78F9CC529EB
69AA7861E894C12DA0EB623A60AC03BDACA2B33887DCEC88E55CBFDBFD2865A9
67D7D46A5789549F457A531110FF752C49D68749B13A218C582885D74779FC33
C0D37FB5008671E726B3DFF24AEA185BF629FA53881F1982E5382970A4F2277D
8F68F9E1C301F96FE85CC40E3BA3C17D8AEC3B45D5BC03A70685419B671FE299
5DA3D9834A0D6E59984523A3AA43DB474A595BE73C56522DFCD8FEBB84F151DF
E1655F2F53C6365CA46341C07F01AF0ECDEF1F8FAA5265382DA24F7A9DC57A7B
3886D0F45C506F62B400C1101FBA9A309F7B9B4804E5C2B259A6CE77759CB1B1
C88ED23DACBD73A61F7C2D1E2679FE787D3337839771DDDB24AA5A1A9F04277E
B1845A1A524220AA7C419ABF1B930A543F6C22926F1D7E3C393D5D72C4AF60F2
403F4EC2EB277ED6FBFA0FFDAC56A40AF67774BBCFB6BB80A7E1FFD70C09D92E
7AEDD1E30D37BAEC2554C467A554514C8C07FCE97D909C6A2971B5CB1937E085
4A190EA7030A75C026D8E7E77EF13E5F855287182849586AD948DBBD756084D6
638F208FCAA9A9D9E084AE26FEA7F8DA256FCE8DC2709FE1A3A666A94DFF7651
418C2CA87496841D4BB263C7304025C5F672D98E8249D2391231C1CB258B14D6
9F53AFB59F5A2578A81D8779AF0F9F54BDFE468B6917FE7E784AB112A3B5C75D
5B77F5BEFFA63A36AC9B20518A950F6F586A5AFE78A861644DAD93ACD4519CDB
B3810301758825C4A7D420213CBAE9025DD9E174CE04C961EB9541DF61181FF2
3DE1FC95CA6BADAB127A9E7A2466B4EBE96D527B8F8663E2E50E497DFEC76196
691CAC82AFA5B51DDFEF07BD6679374C0B52968B4F2AF9078D0E500416E86B6C
845E231F49F5482FF6257340DEEE3B40D3F1FD22E8FC2CA69875C09005AB346D
5D594BBD9804B36D246392CBFA1FFC9AB0AD80A372C8A18FDDFDA846DD7BFFDE
2901F06F2D0C28C095CD67BC3E952AB8C334E4119785BDFE207D0937B30144BC
3728920D8F740CDF189D32CF507A287FAE38C12EFE33B1C2E47900679A0F30D5
8F7625764A91FCFF9EAC1BEE74D63C02A0AF4D1755A7B8293C5E9FD3678BC81F
08C81B8DE1DF689AEECB07ACBDF6868A1CB47E7920BDA772D59CEB4F5F9D5329
BA412E2E26B5607D1A3548847B35A2672FC8A68B0CAB40E3A6387B9370922DFA
2364282D498210854D335AB00D1A2D8CCC1824FAFCF33783642CFBD37AB53C62
0965D5D84F93F39D34715F70CCFEA62D978A3F7594A85678EDD9B541AC8C0F52
DD0C512D65876F64A6C130EE5C1F012664C276C9F58C6163DD1828C929C99262
4874E24C7768869CE8ED4B91203A5C786CD4DAE6A6C96830F60CBB976C0B3E34
6DEA6A5B9F9C38D795726D7F8768050F87BED3FB2AF11F3CE5C7F8E7A536362E
275A7258642BB8037EB06AF8EC32CA892321F78266760166CF5CB0C2C30E373A
F2E748038ACA6C385F5978A93BCD6ED21E0369527F9D3E5654CA8435652EDC09
67186CCA44D38E523A202A2E06A168C7D1788349E8D10D6C1906036A6AFDDE97
6BE3D7F73FDAD5E60F674B7E1402DAA9EBA8895A687836B1969B5E00DCF771B2
F81E6A4FD92109B900CA908499BD35F5938E3502C3DE2C66A73D6DBDD4090BDA
C12CA633A7323F72B21B5A24CBCFD41000B9B1A879E791A4B4834449ECBCE67E
66C90E3AADDEA343127E24EBF6349750F6BEA683218ECEDF3DC91AE6476AA62F
BE884278315D7FB3E5650D3C4D5E50A8E7329FE6B5419A7E7BD6A0BFF6FF5F02
B6F71D98C86A1399B73DE13E964D921E0D69A54A1DA9B61F32DE49AC93D5B903
1CD4FBD8986C34C08CE8711AB72F2F504F322D6C00E1C16AFFBC02BED4263C03
E828C3840E50FCBE0C6F3CFC0266F2F34695BD5F89A51CDB63098EAE17289AAF
7953234EE1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (run.dvi)
@start /Fa 144[55 69[67 41[{}2 83.022 /CMEX10 rf /Fb
134[44 3[44 44 44 44 1[44 44 44 1[44 44 1[44 44 44 44
44 44 44 1[44 11[44 44 44 44 2[44 44 44 3[44 44 44 44
44 44 44 3[44 1[44 3[44 44 44 44 44 44 44 44 44 44 1[44
44 44 8[44 35[{ TeX09fbbfacEncoding ReEncodeFont }48
83.022 /CMTT10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
-159 -561 translate
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.25 TeXcolorgray 0 TeXcolorgray
0.5 TeXcolorgray 0 TeXcolorgray 0 0.1 0.95 TeXcolorrgb
0 TeXcolorgray 0 1 1 TeXcolorrgb 0 TeXcolorgray 0.75
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
726 510 a Fb(10)218 b(INSTRUCTION)726 634 y(20)g(INSTRUCTION)2011
498 y Fa(o)2078 590 y Fb(Decide)41 b(--)h(in)h(a)g(hurry?)726
734 y
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 141.74876 70.87437 3.05556
} false /N@A 16 {InitRnode } NewNode end end
 726 734 a Fb(30)87 b(IF)43 b(H=TRUE)e(THEN)h(GOTO)g(80)217
b(If)42 b(yes,)g(go)h(to)g(instr.#)e(80)726 833 y(40)218
b(INSTRUCTION)726 933 y(50)g(INSTRUCTION)2006 791 y Fa(\))2078
933 y Fb(Make)42 b(eggs)726 1032 y(60)218 b(INSTRUCTION)726
1132 y
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 68.2494 34.1247 3.05556
} false /N@B 16 {InitRnode } NewNode end end
 726 1132 a Fb(70)87 b(GOTO)42 b(110)827 b(Go)42
b(to)h(instr.#)e(110)726 1232 y
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 96.2492 48.1246 3.05556
} false /N@C 16 {InitRnode } NewNode end end
 726 1232 a Fb(80)218
b(INSTRUCTION)726 1331 y(90)g(INSTRUCTION)2006 1189 y
Fa(\))2078 1331 y Fb(Make)42 b(cereal)726 1431 y(00)218
b(INSTRUCTION)726 1531 y
 tx@Dict begin tx@NodeDict begin {6.11111 0.0 96.2492 48.1246 3.05556
} false /N@D 16 {InitRnode } NewNode end end
 726 1531 a Fb(10)g(INSTRUCTION)726
1630 y(20)g(INSTRUCTION)2006 1488 y Fa(\))2078 1630 y
Fb(Clean)41 b(up)726 1730 y(30)218 b(INSTRUCTION)3217
1121 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 0.7 10.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A /N@C InitNC { tx@Dict begin /r 11.38092 def /Lineto { Arcto
} def false pop end /AngleA 0. def /AngleB 0. def /ArmA 56.9055 def
/ArmB 56.9055 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3217 1121 a 3217 1121 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 0.7 10.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@B /N@D InitNC { tx@Dict begin /r 11.38092 def /Lineto { Arcto
} def false pop end /AngleA 0. def /AngleB 0. def /ArmA 21.33955 def
/ArmB 21.33955 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 3217 1121 a 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
