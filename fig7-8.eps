%!PS-Adobe-2.0
%%Creator: dvips(k) 5.92b Copyright 2002 Radical Eye Software
%%Title: run.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 345 366
%%DocumentFonts: CMSSBX10 CMSS10
%%DocumentPaperSizes: bbox
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips run.dvi -o fig7-8.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2004.10.11:1055
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
% DG/SR modification end
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro
%!
% PostScript prologue for pst-grad.tex.
% Version 97, 93/05/12
% For distribution, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.
%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).
%
% Syntax:
%   R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill

/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBlue ED
  /LastGreen ED
  /LastRed ED
  /FirstBlue ED
  /FirstGreen ED
  /FirstRed ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastRed FirstRed add 2 div
  LastGreen FirstGreen add 2 div
  LastBlue FirstBlue add 2 div
  setrgbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
    MidLine { GradientLoop } repeat
  } if
  MidLine NumLines lt
  {
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoop } repeat
  } if
} def
/GradientLoop {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Red Green Blue setrgbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Blue Blue BlueIncrement add def
  /Green Green GreenIncrement add def
  /Red Red RedIncrement add def
} def

end
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro
%!
% PostScript prologue for pst-coil.tex.
% Version 97 patch 1, 98/06/02
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { /t ED t sin AspectSin mul t 180 div AspectCos mul add t cos
lineto } def
/Coil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /ArmB ED /ArmA ED
/h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED x0 y0 translate y1 y0 sub x1 x0
sub 2 copy Pyth /TotalLength ED Atan rotate /BeginAngle ArmA AspectCos
Div w h mul Div 360 mul def /EndAngle TotalLength ArmB sub AspectCos Div
w h mul Div 360 mul def 1 0 0 0 ArrowA ArmA 0 lineto /mtrx CM def w h
mul 2 Div w 2 Div scale BeginAngle Inc EndAngle { CoilLoop } for
EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
TotalLength 0 ArrowB lineto
pop pop pop pop } def
% DG/SR modification end
/AltCoil { /Inc ED dup sin /AspectSin ED cos /AspectCos ED /h ED /w ED
/EndAngle ED /BeginAngle ED /mtrx CM def w h mul 2 Div w 2 Div scale
BeginAngle sin AspectSin mul BeginAngle 180 div AspectCos mul add
BeginAngle cos /lineto load stopped { moveto } if BeginAngle Inc
EndAngle { CoilLoop } for EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { /ArmB ED /ArmA ED 2 div /w ED w mul /h ED /y1 ED /x1 ED /y0 ED
/x0 ED x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth /TotalLength ED
Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
sub 2 div dup ArmA add /ArmA ED ArmB add /ArmB ED /x ArmB h 2 div add
def mark 0 0 ArmB 0 n { x w /w w neg def /x x h add def } repeat
TotalLength ArmA sub 0 TotalLength 0 } def
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-text.pro
%!
% PostScript header file pst-text.pro
% Version 97, 94/04/20
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc
{
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow
{ /String exch def
  /CharCount 0 def
  String length
  { String CharCount 1 getinterval ShowChar
    /CharCount CharCount 1 add def
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar
{ /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def
    currentpoint
    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def

end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: f7b6d320.enc
% Thomas Esser, Dec 2002. public domain
%
% Encoding for:
%     cmb10 cmbx10 cmbx12 cmbx5 cmbx6 cmbx7 cmbx8 cmbx9 cmbxsl10
%     cmdunh10 cmr10 cmr12 cmr17cmr6 cmr7 cmr8 cmr9 cmsl10 cmsl12 cmsl8
%     cmsl9 cmss10cmss12 cmss17 cmss8 cmss9 cmssbx10 cmssdc10 cmssi10
%     cmssi12 cmssi17 cmssi8cmssi9 cmssq8 cmssqi8 cmvtt10
%
/TeXf7b6d320Encoding [
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /Omega
/ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute /caron /breve
/macron /ring /cedilla /germandbls /ae /oe /oslash /AE /OE /Oslash
/suppress /exclam /quotedblright /numbersign /dollar /percent /ampersand
/quoteright /parenleft /parenright /asterisk /plus /comma /hyphen
/period /slash /zero /one /two /three /four /five /six /seven /eight
/nine /colon /semicolon /exclamdown /equal /questiondown /question /at
/A /B /C /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X
/Y /Z /bracketleft /quotedblleft /bracketright /circumflex /dotaccent
/quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s /t /u
/v /w /x /y /z /endash /emdash /hungarumlaut /tilde /dieresis /suppress
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /space
/Gamma /Delta /Theta /Lambda /Xi /Pi /Sigma /Upsilon /Phi /Psi /.notdef
/.notdef /Omega /ff /fi /fl /ffi /ffl /dotlessi /dotlessj /grave /acute
/caron /breve /macron /ring /cedilla /germandbls /ae /oe /oslash /AE
/OE /Oslash /suppress /dieresis /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMSS10
%!PS-AdobeFont-1.1: CMSS10 1.0
%%CreationDate: 1991 Aug 20 17:33:34
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSS10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSS10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-61 -250 999 759}readonly def
/UniqueID 5000803 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA052A014267B7904EB3C0D3BD0B83D891
016CA6CA4B712ADEB258FAAB9A130EE605E61F77FC1B738ABC7C51CD46EF8171
9098D5FEE67660E69A7AB91B58F29A4D79E57022F783EB0FBBB6D4F4EC35014F
D2DECBA99459A4C59DF0C6EBA150284454E707DC2100C15B76B4C19B84363758
469A6C558785B226332152109871A9883487DD7710949204DDCF837E6A8708B8
2BDBF16FBC7512FAA308A093FE5CF7158F1163BDCEEA888D07B439DBD4E8B4C9
D198C03874B5E6F8FBF4922065A92BC3E66D05DE53971CB1424510E892442858
D69CE1F76E4DA76C87C763A4B2FE36321E54B1328C9155B8ED6361855A151723
3386AEA3D042B8D89C8C0E9A33E5DF3B466F7BB8C2C8A4ED4CDAFF55FC6D3EE6
0AF2CEBFC1AC3A6E6692F8BB81F82D86BAE85016AD62FCB05467082C2E5AD348
44D1439C2B59F65590E57CA0DE481A7A34E79931B1513C4C30156170409A4BB8
46D412D1DAF88AD30722F12DBCA1CCC6B4BCC28D06B0D29149DDEC520C8FBA13
6B82E2E1790F00B216282FF122EF0D47B70A1B29514DDF7C0435ED238C14BDF5
6DA243117FBEF7398F97EB95597707ED63C6797EBA1B46EA19ABB1DABDA171B3
16CD500F5D64CBFBE4F9CBC3E66A34427D3C4D0C432710289381F9BFD91B4FF4
1E3A896C3EEA2F3105C218877D6C0C6B763760FA364D00065E1CAE9DCB5676ED
286A9ED0D1C946DCA6A2A670EE0936FB4706CC62E234CFEED34AA615C48D2872
A087F30990C85E64BA68F3D5C117123467DB411C9F2D6F6858CC70C1E352C477
713097321B4C4FD4C5CDE305415F998E7245908EEDE6E056A736EA77BD8C639C
3A79FFD0B74B3D28F0494A115F2841CF8A8827AB5608F96FD8998A5F40FB3DFE
3AA0C7696DE4E1D18DC0D6E84B943175FC38FFC42A9C0CBB13A908978C98BFE5
034F88480F32B9DEB2FD228FF6CB0B89B045AB02020C82E3F5716DC640613185
9F597CE262729BC52132F43922B9E28BB71A30AC8709634561B22D13C4FAFE0A
12C4451969226B220038AD8DDA990A4E2CAD53DBEAB698898BBD3046234EB4EA
901287E71CB41296C431383AB85F18882F65BE36923F6C0FD6FADD64480043AA
42731BADA348EB5FACA1581B339ACCDB796E646C8BE34D88BD581629FDAB9F8D
528362F2537C573E2A6F196E2BD6F7B703BCB74BEBF795699D694508D5F8D37E
78205F12E62F8D3BA1B4918A6CCD02ACB1038BB5CE06901A1C89A6708FE690FA
8FC4F166397624A0E7F4C04A313E24A71019DC368FEB97DB6D662F9AA3F0F6FB
3A4CE8F86B951CC77E1E60BDC6615CB045230864F31BCAC466DA5BD1C45D4908
E21C3826AFF372487C69843693F33483AB4D5330334A5F164DE1FB76D2F52E7A
C6B98C42BC8AA9BC7338207C3B23FF57619CDD39916953219EAC581DC19F8100
14AA93B6F70056A08F5740A7C956C85B2270B2C768ECFE2D348BC633D3C4A2CA
676A8A657233F3991A8F4CF99A24A84233493791810129841B83812C32D16BCD
FC0BFFD171E95C4869686E45BF255F44845CAB9134A90A9C8AAF78A7F519AD69
F9FD9CA6DE5C6D77BD9960605DE165C96AD5E3FB194ECB4287409B8B8E587FB0
220B261A62ECD4A48CA8AC297976BD90441553A397C9C925CB2A9C821AE55A1C
5B79A7170266F590405671F4A39C3F85C3DDD4A0D1BCC907F45E0070C8D4CAF9
76B38D5813F2FB91D7850BDABC9C9DFC81865B2628DE246EA622B2CBB442E889
4EB5B5AECEE98056CD2228C54520E90087ACDC61F12A7484F0CC430A6BF38759
AD1C1B9F1B7CD92382A3AF5E9B9A988EA62C90523194A7493FBD4D4E2E612090
77045E4B0EFE6485FF8D728120376D9D41EA83E8035AE751FBA414998E25D71C
8F9F2626473774905310433DE2D3EF53AAD3D5F46AA9F1F860A19237CC66EC19
B34AEAF4202C1E36998D86A1C9E32F517DE31C1169B3A2289049789719CEEBA8
6E792D5D9DE42CBBE0C1F913B833D953D8982997CA23F1E969F617DD06CA3856
8B6AF018E7E950072E980258937A910D901028E31CFE8F9957130DC04309EA1B
5F3399717935D33BCAA02EED4EB30F79BFD4A3CFF22FC85F191EDD80080B3987
7F2536A695CE1DC73454EB5AB5B95FDBBCCDD5991EAF9513455DC7E388822E9C
6FB179C164CDDEC2277AE015A3186719E19F42DFDD17803EA625B5D127869C43
E61ABE6C9567FB42A892CC07804AF5D22068166791EF6D73EDF6ECD5F0D85571
F3AF163586BFE065FD375C0C0E56CDEE95F8B86378110FE1146265455ED478E3
7F9236C3B0332CF7AEAFE38F0965AF757AB789EE59A4ED2D1C835A81C532C8F2
C16730C20E803639ECAB7594D6FD9C3F4DE28D9BF47BF64B574C39EC52D26DE4
EB3DD7FF128A98463FFEA6680B6E6434C1B2E50A10DFB5EADEB76CC59358EBC1
82A3D7C8397AF90A6177E8BD5472EA039C9B0887DF2DE71DBD07FCDC62E8D17C
2BA0C7BC36BD6DA8EC14526B702E3A227CA8A266C057E795228CE399B5A9C997
27E916E1A94410C5566EA0AB21264C5BE4C6351E6667BFA884EAB3E9D5E23036
21BF4014BFEE11546E002B71857B160B7C22A7F77241E19677A77BD57BA0CCCD
EF0B7ADBB35E60D4CA95B47113DD9F1B8EB89A04CCB1A927801C2379B3B35BA0
873819513077D573CC7E1ECF05D9F8BE4EB851F8D10A12F4E4B4F01C86744874
9B98B958BC90366DF38F0C8B3AE10AFB0902836B45047E79945A8654C8333468
8E2D67BE6D01D8ED210872A08BBFBAA2B4CF145931227A36D19BA42D6AC76938
0D6A78D0D1C3D861AC0C9F94BA5488D535556029B6C9FF4F92F13531F3EE6440
59D0E3B4DD327A29E1111A5DC73216D9EC57FCC136A0E0A25B9C195DEE419518
1B7E8C406729B2510E32636D0E726C12528FFDF3EC9C282A08335307FB6013CB
956A3208EBAEAE12750B32E2DAF3F3669E9C8A761B07A803BF7175439109AC01
F44BB0C0CE0E856D9231349766FDCEF9E023B18755CB6DEDB1EE10214FD6427D
05B3AD51AB64D575268AAB9D2A7D450CD2A150AF8E490E5D11B2AFABE69FB693
E69D828D454213ABE066DB4A25B46A568DBB6CA3D19720CBCAB28E7A0700E06E
325BE11E680A70CEB3D446845CEBAC14F355FDB408DEA65F0CCF0EB333533F63
EC1FB917D6FB63CF9EFE1649207E428A14C3F486D8871BE0E7565F83DCE76DCC
2365455B8CC1FC3586AF2334BBA929B218B0EFA04FBE0EB209FE4FBAEB601CDC
BA05650F317E7EDCA029E60FB8F02D8A42B43FE3CE6B4E0A63E3644FE1823C39
34F4192719AF87D11B6BCC9FC03C327A232E68B66641CF686702B53AE34F59EE
080AC0357F822D2916D1FE4AF33625D1D067B23134A50DC3EDE0CBCF75EE59EF
CB3C859F4675849AB203C544AA89B1038274D8DC74ED9904FB058731D81E2FCF
CDEEE12F554DEFA8E7B919A42C5B4E190AB7DC46CCDB77962B7DEFFC7C105115
18E867CB00472C07F3F5F54520F3E75FD3323818A19E46B96C3317DF4A07CF32
68B4943B32B23B1E60E59C7DD0E41EA44F9A060430F6CC9B502B77F3A0C08AB8
71A0E9FFAE441C0721E2E70DCE028927DE8641ADF3C80821F5B71C1E80ED4CE4
8B1151862009AE18F59ADEDCBDD985770992C5B9B3450B1415BCC3A2768FBCA7
D404C385193EFCF4FB41CD08C5CF77DEA90F466C5A90B4AD4EEE143D01C94D8B
9D8DF9D58F3C343D06110D03B05588DD2D8439766C6D4E4E2F334A30DE6CCB01
D45EB8A942AD6479AC2DC1F76E305B675D444F597373C662FD2CB6DC724743F4
40E08BA2DBA6A97CF742832327E563EA986D55EA83E671AF181C32F162E2FB3D
CFB3EDE26B8F07412995D24DC236671B5EA5ECED95EA110440562DA3D76CF5B7
627D1A78CA3925E9F282E8BFBE063C3B35AC34370D40A456D52248BFB8D298DD
120A0E50D7E2C94408D97F3F931B52DD70D9DC0F0A85DA14ECABC9A0C1985AF6
CF5D348CCB5E0AF6364C1AFF03A518ECE8C0A226551D1B98A4016B5D8CB2A303
E77B80A96E17C1A2049D27724C8E7F688C6411DA96DFDCB6D22F57F9D89E65AF
BBD497CDB67D7FEE09D215BB8D0E5FB857D8C8AFCFA9D9E7CF64BA96DF295B50
32EE70DA3FF4047197ADFBF90D0A1E9F2E9D22DE9C943113EF058E5D61894C45
80B5F9329E269AFB752F0544C1905962437A813181040918AA884454BF0762AE
320DE67C409035A9997784D1AAEC2029A853EC81445EEDD03E69AA3EB8751FF6
2AE0CD27513A83125784F8C853B7299385780991A0808EB7F6047D7911C04BD3
3AAFE75D65133A8813704A46A21B925713EDA7CC52F89C9327B2012B5CB76AF8
A16DB2078F9FA492AB7DB1DF1B3B2295E2C0E50CB5730F8ECCA928A9D17C03EE
CBE52FAF8EE9D4B1261DD53453FF297E799950DF81610277BE5C7D6BEC05033C
A98D9E315780088C2A2A810C037C68FB338C6BD42C2F7BB8F1D3C0ED9071005A
4F6B4DF4C2C5D60540312D09E280D501A95D267E4055335CFD4FBD4EDC6B59F3
1B3CD6966A8DD9994E9612EA4AAE46BDF69C892D245AA21AB00C11766E3C34B3
BF4D64716A89D5D58E2AC0E124C9D1C046175C4CBB8E7B051D746DB02CED1810
6001B8C645097D88F9E754F510AC3EA3EFB52BAE46B2505922F47FB7013E28CF
ACE641171BA7B89D07F5C3E33C731D7F66EB9BF3E92F4AC0C043C841867B8F4C
5A4219C357932BA48BFDC8C4AC08D530B0B68A481C23B2F0F7A7A550651702C5
FE50E9CDB1C95F4BD48B344CAE2344BC8A4DCB904199B53A39599D9355AA9597
4D7D8B11F5DCAFEB53CAF30F457F77B5D8184D972B880FA06CA134B6EFA11524
EB75D2A120671681463F799318FE347AD09BE5626E2576A2A7FD2AEAECDCA6DA
AB75ABEA4CF6AC7C2DBDFB2BCF46729CF6A71A0B71EA0BCA63C8E44258B96545
6042884A520D01D55F682C6E07F66F3F0E2A1349F420DAD29B3FC517C7AFBAAF
3D1C84430A242F7F1522DE7D9A093CA96B1456E0B0896F223ECB8EFE0DB14BA1
D7C27F7E7837A793DEBDDF5F2F618DD99F2255F4E639A19143901A4A88A66DD3
24BF01C8582027C40ED435206AC761A7B5E77C9AE7809F68DF8765E0D38363ED
E2EBAAD27400ECE9D018786CCC25F93A9E83088BC2B9C2E20DE9181143D675BD
966CBF7994C0C3CCD7CC9553868047E79CBA63E87FFB7E1D1D8CC1504854803B
B83AC89E20AAE52895664CE8E3151F5081126753A978C2360F1E8B1E052107E8
70E5DA5FC4ABCAACEE58D5FED475BC51CD9C20E1988C9803A8761CF33644F334
EB3E96295C7A459FB38823FD0C7F0ACCCC3EB1ADBA915C4F5AA4EF362DB98FDA
66958A45BA6ED780EF63F1C53459EE33DD6626ABAAD6C8D51866E39B05761F9C
2208B2155A10CC49CB76B37248D134BD42BB4F130DD2A29193C5461024DE7803
A0D19DD593DEE302664BD4A3A09C9280A31F7BF19563D68D2A483DCAED325D4D
B1FE770CA58AFB9FF845BB41F637E428E973909A06E6661F2DA2B7834E6540B0
EC1B31B3817180E6284434D3E373BAAFF43A5F26522C2D9929F45F4E63CCFF32
A759151C543462CFA2CCEE5A6899B2132E668566C9B96FB14AD1681D012460CE
F2E455F18011B8FCD33B01E6EDCA99ABA85B193F1842BEE3348D9AD7A25EF054
538627646D7EA108701789BD16398367B9C93FCD4D0C68BFF548DE8635EAFF20
65FA3BAE15E69C697B842D195127F5443D797DA63FC7B6ED1653D272DB1C24B9
7E41AECD2A45C74C4F9CD2F830FE9D91E5745EF4A5E0B7C0ECA58C224BCB947B
86BBE6F809C98035234BE017B8F9860794F8A0E3B8995343135FF515FB3B9F6F
75B90BADC4D449FD7D03C16733F64908AD994D3A1D226DF11B98AB082909019A
65AAE0FD4BA57147B95FB8ECB4E20F0737C925CB8D174D2FCC78406E2CE5C325
77C9A72563BC4C7D31AFB2C4EC2BA9FF60FED3837CEDCF94C0E9F7B1A3603672
4C686514DC63CE445F550CE02DCF93BC8259DE0F37EE9DC0AD15273D8958BE57
E02430A68C7EAA6742EAF447F51CE7850793AC5FA15D62EA544754B745F2217F
45411128BD2EEC0639AE0DB0088C2E04C25AD012E0B924F5068C22358DCAE794
15DA857EE92700C09359BBCCC76FC1CDD3368CBDD075428967BC40E8829D6543
A068609C8C12BF24D8BC37ED4799E3B47BF3C78D47E1847E4534F0ADAB4B51D3
80BCE04EBE020AA260BEFC7DB9D24BCBF68F61D3CB816F13C9BB36952C4B6E12
095E8C94C6FA1B185572218152EA492CB067F24C3812B2E600B80F1702B0108A
9BF6C396D2C3BD7DA481475D46457B81F412A4337846DB312DCB123958D4AAF9
55C02B184EA939D4F7DC7BD179B8C168F5F719812D1725291A324D6E0248397C
1F503C384E2DD4016CE83ACBB47949330FB58521569C0272BEB82BDBF679DEA8
1442EFCF690908C0F2BE5470920D3AB2EFB2835E312DB3AA699459B972E80C6B
E73A02E4651D88C8D2A9B82EA0DE9A3D06C761258E7C5FE80362EF0B2DFF1325
11CD43D52644AFE0177C47EF77C98A27B1E02969123B13CE5902BB3AD0908846
3FB76E05DFADCCEBBF36A2BAF13B3142F74F387DA5E695193258E00FFC487B18
540FE1585E336141C84410CFBF46C051305B05ED0270FD251F3C681FDB48C01B
BF9EE87CD22FB391EBE84D15A736796F531BD31751933F7BF5792036C6517D51
723652367B91A1E14703487A9C65573EFD650DFB4EE87B71F3913452B0E629C1
17838AB0EB78714FA1EC3E495C11C4C30C2B6E236E8AFB026B22A984A31B75DA
942FE1A0D86710BFDF0965A03511D4F6B9A2C3EE19E3D61C897FC5901B65F958
58238AD14DD010782B072EB2159C727682583C5E5FEE3E038B13461896621974
ACC00EF1054ACF6BEC9A888E039C3BA6DF910A312D019F4E4595C74B6AB490A1
177B4E4DB61E7F5ABFF58B9A21FCD18681AEA92881A1136DF6E8A430719ACA48
91DA3DADE59321CE8E09217F4E5DA25078593E2FEAA617928EA2894F52B1FE83
08A23162D30D62D035632070C8E74DC4AE298D185F63888A8AEB124B2A80281F
FDCEFEF8BCA9FB45912DB3B1354CE3D818A74030470BA91F38515F31A7C91EEF
36AD1D98AC7EFC7EFC105F43815B3AAE20FEAB68FABD19A2D49179D2970009C5
C649D8E6AFF0065984948105B3349BA1294483E7B7BC61E249CEDCDD9AAECC82
6031DFEBF2013E198C1C78A0563AFDD6BA213F4E7F0242281ADD387849355629
9327FB8671A92EE2E43A4663EB3996D13019B5388BF72A1ED9EBFBE33CF2E1C6
C1371B98053B22AF891DF0B737C57949015E2AD6DDA0A00F956CBC2CE49A9D1A
4C03853820456329216557E9593045D013F29574062A65F424E65449801E6B69
193C0D5FA2F09C95CE2BA1CF1DD976DD517EE432212864788348DD0F1A1A1572
00ECAE10C2AA8CA96B961C924E188FE5DD9FF624A5C349356E7C3BB387E8D917
454BE7971A6402C5EFFD118E2540AA5A3543BD1B71964C34FCB3FD9F7A35CA1D
7EA3A173B8CDFBBEAF08B58C81945215BF52FD37F3CAAF34E279628FAEA3A8CA
9970276E2EEE85A90160A16BB545AE61E4D7F8573819D4175950DAB77DE30ABA
C56A7967964C45B67297C5AD2A5F348AC38FC136B914346204EA235D69856B73
EC96DC3911F2764C4004C03E071C78A0BA69F38529A30FB4511E4A287C7E4D34
1FC3DD1561
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSSBX10
%!PS-AdobeFont-1.1: CMSSBX10 1.0
%%CreationDate: 1991 Aug 20 16:43:06
% Copyright (C) 1997 American Mathematical Society. All Rights Reserved.
11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) readonly def
/FullName (CMSSBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/FontName /CMSSBX10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/FontBBox{-71 -250 1099 780}readonly def
/UniqueID 5000806 def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0529731C99A784CCBE85B4993B2EEBDE
3B12D472B7CF54651EF21185116A69AB1096ED4BAD2F646635E019B6417CC77B
532F85D811C70D1429A19A5307EF63EB5C5E02C89FC6C20F6D9D89E7D91FE470
B72BEFDA23F5DF76BE05AF4CE93137A219ED8A04A9D7D6FDF37E6B7FCDE0D90B
986423E5960A5D9FBB4C956556E8DF90CBFAEC476FA36FD9A5C8175C9AF513FE
D919C2DDD26BDC0D99398B9F4D03D5993DFC0931DC68A9127B5D4E0B0EC0247B
E3E94556B49E4EAF6EA99F1420405194F4D8D644F28FE1F090E80BF5C7D59585
C1AE46D025A67CD5A59ECBDE2AAF87F725A9843589338F85C6176E7F6DAB2032
74BA5CDC992D97660FDB3962D486E2682550AF11DECBCB7F76A28A4177905B2E
F4767CA41528636EA69E80B3A1D33060B9F0250896EF2431F4530727CBBBCB63
5D0CC646976759E52EB09E65B7110CA7A16EB65E0F9DBD26032DBD90A6964D18
6B8BC2030609B972DA155820C9FA67A1A26B9BC9712A9A5AF82343D16BCC542F
890ED28C0BA88F875CE90B1910D1A8FAFA6506F893CA462FDAA96E2A71ABC8A9
A209E7AEB0E41C5A3ADE180857031416EA0123B75292427B282D9C21D765A8C6
82107AF774BAEFA24DCB2DB22410CA3C540C0F9D108362C9C9C81FD259BFA359
D7289FC6963978B46CCE8744FC96D5F106A59311646E6C4C6E520AAAA9719D68
9032C53E3C38EE31A3E9995FB08207BAF83F0FCEF63A536528839428AD1E8A68
F254B65CEC6ADBDBB524D4639388374A5C74C46DF2FD1A30C7B61995ED32BFFB
7F06514E444BB108F3BE17F643D2BBFCB2947FA98789142D00B63105B09B9F24
86E3FAF44F38E9F91A405408481FAD3B8B60381AC52FE674CE23C2E2F688C244
EB64A97378970E7DEAB6FD875ABAA19DFA10D3FFB5D2AEE741A277B5147C8103
1BB179D97426EFA47587DC7D60856B369CC280AFF938EFE801F7140730187895
5E5405EB740BC38B48A7A84437916B550A65C7069CD0940D54DDFCF2EABBAF6B
ED1681F1E44855C53DEDDE611A36118430BBD52A00C12ECAA9229A2127D51B7D
47F736730A040175C40FD9D44B6F7D3B4D672A0A2AF2DEB97AEBBC9E01C5BDCC
3B9BEE085682F871A19C10D9C496BC97D0B897FC1586783DDFF9F63B807B0BC2
358345BCE5C6C0C1EE3E1661EEB75850F0FBD15C32D71B6E5614FB8AF049BA55
9211C7A0020B58792A48A6755D7F5A52BDBA827B04745D540AA32CAB0A577122
5D52FAC33A6951C79E0AA82E4A7999486373A0EBC2C53F65E0FC1C48ACA91721
5208D071F1E64E745E58BD0D3889BF3295B67054F710FF90CDC495DB9FF89F43
67D83F23EF891243EEF74A149595B29A524F6CF0F8CE95C0BBF7352576E4D9FA
6C9CC7FF74B2D91D5F9AF4D9BE9F42FFB51FB38F9C64B3BADEFCC70529478D9B
1FC2F49ACC0E9AE08254353D1237B5CD0F7255DEAB6F7FD345E8A4BB78C37C3D
280A0D5F82AB138F4B816456DC8E4367941572AA1689562A7D3DCD0152BCD120
17CF16D95C439BC7BDA2CBDF91469A485C927A9C938E287C8A1DDB99491E0264
C71D53CEA437E8547412EF253D94572D2E242A99E68165D6437286749FA1DA81
6C94F9B0FE68DA09566357F36797961CF3D16C3A4C37A939B3E59233553BAC95
9B31343D978784D38EF6B9F2C1161FA73518335D9EAF8270777401C669B4C05D
6B070C5A938016FC5B4EA7DE6A813F175813B1741E368BEDE38CE4CB44EA29A5
6D6958FDF276E354A959D6BC6FF854EAEBF955A9328AE7159AFA8D488DC732E8
260F88F91BD60B164547F2CB37396154B2FCD5465FCE43FC8FE9CD49EDEA3DD3
5CCBDA2BDA3976955FA436C749D4474332492536DB3B20A92424A5BE20039858
293975B67745DDC24DC1A82C03226A7D7309C358F714585982E86C611133C7BB
89340A39472F4B9EB00F17AAC6F6874F42559B5F7E317F2EFF1ED35239873CFA
B907DDA7D49A79CD1D9C073FE25C802A48CE9A434BB1A4290262F0EEA5BF144E
32D6CB288F28FEEA26D911DE83EBA8E2C15EFC890169E197FB8483B683B04FE5
5916397A4DDC34B96A041993BF8AEB93711F58BFE2FCA2F7DFC1283E5381B311
F0C1EDA9975CB9D135AA074D34583889030318C47682382EB29AF07381A5BE9A
6075BFEA70EEEDEE75AED60912E346C899E59359694577D82B37165C1C863F08
45D8AB8D088E1ED7B14FC29AD062F7318571B7C47724AABE7343BD1EDAB3479F
41C1C4D129D79318A8B3D1E23D11578B0B0D1CE2083C5EAD7CC597077A2786EF
658D86F23726A59D0EBE62CBD513592502E15386AB5CDAFACA0DC801ACA12EBA
E8A40B603077E87034B38F16FE96502EE9B6084162C59F44C727D2EB90DADDE0
1D4B8ACB11591D2D4C7A4554EE1610B562F9318FA0A68F4C97C7E070CB5F65F4
C5F5E9A27DBCF8FD5C4B9063B3530374857542297FF6D07ECD55EEF5D5D45830
D0898C9EA8F85C0379D814D56A9DD6D502A23D8B6775D77B587491BBB4163F36
54AC2245D992F4A9299EC1068C4BA0E7654D90C6BB6FDFDC6893158243937A41
653CBAD073CEF1AB88BD40CBCA57AA1D5FF2A989675B1665746E90A2F4954E99
FC14B7E77E3E940E85B56E9D76C6BADE236DDA87868AF4F905FF58506BD718D6
D6F118DC65E2BAFA1BE0CF868C3A1E2B7BA32DE82A413EC9FB467E0C7B07610E
07856C44B1878A5FF3B57BA6623716DCF2C3DC583A30DB9BDAE02BAA30940C62
69D4696149237F8C303DD61BECA912AC4F02C3F653C3FF16610F82115741C4FE
DCDAB5CC4735BB515DD0B39432C3C9D0376EFEA506866CCEB1911A9D1422A96A
3E3D53B55CF32F8C8C14AAC63B7000BDCEFD0638ABA954BA5B97ECC522406C55
DF7F813E583D44BB0B6F39552DEB2AA1481F025536259F279766E29817B14EDB
45030F87000F2C383BFCCD39E5E302F484CAE41248AC9FE4C0E8F475D2B9BEB6
3FD4A7CED351E0CEFC97AD5F430E69CC90982ECD480C3842D5171325CBA86E08
29DC57131998B921513CD6658638A2665C4B24BE39250D6BB15F23BD9A518F86
1B9506004AF44D2CD334224AAD46B2A06D164D732C80441ACEDA929374156A83
05D4A6DBE7DF590DE62C06DA3C262198C41FD7DFCE0B5F515FE37BDB298AEF9E
24C469A09837F5670A98A248AEFEC21B573DC72E85ECFF5C63A74073E1A14218
10EA546BD355604B7A4606CDA2EAC40E712C81A35747C6E8E08657C225A8EC93
31520FD4C82BB8F503C6CC0A6E5A6092001BD8B6C665E0BBEC69B425909B1427
89841E57497A99011D930F4CBD11A3CC6C4175F578CED1B887A0F9414F9C93C0
C31B26D765CED7AA912A9D80F867327C3DCAC903A9C377FC3A1A670AF980A7FC
6F5A05E8F6582A1A0327F808701C065A34B5368C0B225BFBD40A5DE29A64EA9D
4BAACBD72144CBB519F0CC910EBD25D14F6ED487A6B97371B38F9228F6C41E31
46B926F02FAFC8D983F0C171766853C873D52B8108C0178ACD5D8FD56D948906
95A336583CADB63566D30835D58FD0EA028E82F7D70051296405FE48B031DF6A
BB2967C3E52BE7EEEF8C5F3A1163ECF8249E99B2350C3ABA7258A43574255AA3
7C55A6FB9B9313BCC442F9AED8D2485A22AB5EF7D1F75EBD5BD47A8807C3F8CB
D237F54FE27657C44F1DFE5D075C406EC82CE48FB91CEF2D2F9FEA37164A7356
25348A2F58B2F6894D4CB8D1735A1CFD25A3614247D25BBB560073F9196E1EE5
215451A7CF559D2EB8A09F5C16CD1636A2C740E55469EFF3D2FFB992B780A142
EB8C14842575542172B8330453BD3390EE86A45032167F963CE821E983054981
854C60942CB296F6C99561658105FA022E39F83BB55ABFA07EFC9573F87C3038
9632AB78742AD0DBC3F5FDDC708E8BB86701C2D20765FD23F85431F90281AFE7
105B6C9A2A4A3E120DD41E40ADAF91E4DF0DE59AE134004382EB44AAE9F72BF5
1AE4E767FC0D39CAC477F0DB0C91717FF4BF9DCCD758C79E74FB8643054BEEFF
D218570B068A876055EA7D2CA6A3F62876B87DC8287115B5BB49BD8ACF3363AF
B4CB5D4D5104986710F2DE01A2FD2816D34D431824B6ECC9526CC39C92D0E483
BE71A6741FD07874F6459E99BABFDFCD4DC8ECBA93FDDCB2FC9C6773A881342E
2E69513997CE2E3BE094AD96383496D615FEDE8C48B8F198A9F9789A300FEECE
974F5CD2BD18089A25C2D99EEDE8ECD9DCF36AA4E5D79210569C300A50FDA4BC
53CCFC48A1B6D2D8F8C3CB6920D00F5CC8CED7456075F42602592CFE70240A42
A45ECA22241BB375A2F658ABCE1D2645C225116549E958DA55DBA0B63FAAF222
B1B6F002A79FDD71C1D5417EB48E07065219E21D637A2D29CF04F45F59881936
AD76CDF287EDE715B689A47DD04DCCA8FDBA6A13CC6959A3ECEE59509D37E53F
613291B5577107F2EBC55C684000CFEF593A6ADCF6CFD4CD44C6A3D7927C16A8
9018FD9B8F7751A26AFB3AF7FD7231C510EC7E6C48B271D2D0054785B5456801
559CD4A1208CBFB50D96BD5276719257CAD4B2D3894011D4EB8416402660118C
1F4BCF6A5C380FCF01B4E5FC3584348FBC10E8A86621DD8FABE73B6DE4A5F42D
AD394FA54AFFE1D2E99F57075E75486D4D82E7B039A241DD7643D71AF1E49B23
5A359AB7FB151456123F14ED9110572F67E7E9E12C93745EBC095692AB2EFC6F
59C7BB96E4F48E907F95F361AA292B2CE2F204B267E2E6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600 (run.dvi)
@start /Fa 134[38 38 57 38 43 30 32 28 1[43 42 43 66
20 41 1[20 43 42 25 37 43 37 43 40 11[57 57 46 3[61 59
73 1[58 1[23 2[47 50 60 53 55 55 5[23 7[42 42 3[23 6[23
26[45 12[{ TeXf7b6d320Encoding ReEncodeFont }43 83.022
/CMSS10 rf /Fb 171[61 51 58 2[66 66 81 1[63 1[27 2[51
53 66 1[61 61 5[25 25 6[46 46 3[25 46[{
 TeXf7b6d320Encoding ReEncodeFont }18 83.022 /CMSSBX10
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
-133 -348 translate
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
1 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 1 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 0.25 TeXcolorgray 0 TeXcolorgray
0.5 TeXcolorgray 0 TeXcolorgray 0 0.1 0.95 TeXcolorrgb
0 TeXcolorgray 0 1 1 TeXcolorrgb 0 TeXcolorgray 0.75
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
515 477 2865 4 v 515 1098 4 622 v 593 609 a Fb(DOER)31
b(SAM)c Fa(ok)p 1060 622 110 4 v 593 709 a Fb(DOER)k(BIFF)c
Fa(ok)p 1057 722 V 593 787 274 4 v 591 887 4 100 v 643
857 a(SAM)p 865 887 V 593 890 274 4 v 1811 787 273 4
v 1809 887 4 100 v 1044 w(BIFF)p 2082 887 V 1811 890
273 4 v 593 1007 a(Creates)g(t)n(w)n(o)g Fb(DOER)h Fa(w)n(o)n(rds)e
(that)i(do)f(nothing.)p 3376 1098 4 622 v 515 1101 2865
4 v 515 1155 V 515 1661 4 506 v 593 1287 a Fb(:)41 b(TESTB)30
b(MAKE)h(SAM)f(2)g(.)41 b(;AND)31 b(MAKE)g(BIFF)f(3)g(.)41
b(;)28 b Fa(ok)p 2555 1300 110 4 v 593 1366 2527 4 v
591 1466 4 100 v 643 1436 a(TESTB)p 955 1466 V 98 w(MAKE)p
1290 1466 V 99 w(SAM)p 1563 1466 V 100 w(2)p 1705 1466
V 99 w(.)p 1827 1466 V 100 w(;AND)p 2124 1466 V 100 w(MAKE)p
2459 1466 V 98 w(BIFF)p 2731 1466 V 101 w(3)p 2873 1466
V 99 w(.)p 2995 1466 V 100 w(;)p 3118 1466 V 593 1469
2527 4 v 593 1586 a(De\014nes)e(a)i(new)f(w)n(o)n(rd)g(called)g(TESTB.)
p 3376 1661 4 506 v 515 1664 2865 4 v 515 1717 V 515
2879 4 1162 v 593 1850 a Fb(TESTB)g Fa(ok)p 880 1863
110 4 v 593 1999 a
 tx@Dict begin tx@NodeDict begin {8.9 3.9 32.9723 16.48615 2.5 } false
/N@A1 16 {InitRnode } NewNode end end
 593 1999 a 593 1928 274 4 v 591 2028
4 100 v 643 1998 a Fa(SAM)p 865 2028 V 593 2031 274 4
v 1811 1928 273 4 v 1809 2028 4 100 v 1044 w(BIFF)p 2082
2028 V 1811 2031 273 4 v 593 2093 2527 4 v 591 2192 4
100 v 643 2163 a(TESTB)p 955 2192 V 98 w(MAKE)p 1290
2192 V 99 w(SAM)p 1563 2192 V 1615 2163 a
 tx@Dict begin tx@NodeDict begin {9.79996 4.20004 5.00002 2.5 2.79996
} false /N@B1 16 {InitRnode } NewNode end end
 1615 2163 a
Fa(2)p 1705 2192 4 100 v 99 w(.)p 1827 2192 V 100 w(;AND)p
2124 2192 V 100 w(MAKE)p 2459 2192 V 98 w(BIFF)p 2731
2192 V 101 w(3)p 2873 2192 V 99 w(.)p 2995 2192 V 100
w(;)p 3118 2192 V 593 2196 2527 4 v 593 2313 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 5.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A1 /N@B1 InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 0. def /AngleB 90. def /ArmA 0.0 def /ArmB 10.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 593 2313
a Fa(The)g(\014rst)g Fb(MAKE)i Fa(redirects)e(SAM)h(so)f(that)g(it)h(p)
r(oints)f(to)g(the)g(co)r(de)h(after)g(it.)13 b(.)h(.)593
2462 y
 tx@Dict begin tx@NodeDict begin {8.9 3.9 32.9723 16.48615 2.5 } false
/N@A2 16 {InitRnode } NewNode end end
 593 2462 a 593 2392 274 4 v 591 2491 4 100 v 643
2461 a Fa(SAM)p 865 2491 V 593 2495 274 4 v 1811 2462
a
 tx@Dict begin tx@NodeDict begin {8.9 3.9 32.83344 16.41672 2.5 } false
/N@A3 16 {InitRnode } NewNode end end
 1811 2462 a 1811 2392 273 4 v 1809 2491 4 100 v 1861
2461 a Fa(BIFF)p 2082 2491 V 1811 2495 273 4 v 2121 2514
a(CONTINUE)p 593 2575 2527 4 v 591 2675 4 100 v 643 2645
a(TESTB)p 955 2675 V 98 w(MAKE)p 1290 2675 V 99 w(SAM)p
1563 2675 V 1615 2645 a
 tx@Dict begin tx@NodeDict begin {9.79996 4.20004 5.00002 2.5 2.79996
} false /N@B2 16 {InitRnode } NewNode end end
 1615 2645 a Fa(2)p 1705 2675
4 100 v 99 w(.)p 1827 2675 V 100 w(;AND)p 2124 2675 V
100 w(MAKE)p 2459 2675 V 98 w(BIFF)p 2731 2675 V 2783
2645 a
 tx@Dict begin tx@NodeDict begin {9.79996 4.20004 5.00002 2.5 2.79996
} false /N@B3 16 {InitRnode } NewNode end end
 2783 2645 a Fa(3)p 2873 2675 4 100 v 99 w(.)p
2995 2675 V 100 w(;)p 3118 2675 V 593 2678 2527 4 v 593
2795 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 5.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A2 /N@B2 InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 0. def /AngleB 90. def /ArmA 0.0 def /ArmB 10.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 593 2795 a 593 2795 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale false 0. 1.4 5.0 0. Arrow
 EndArrow  } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0
0 0 /N@A3 /N@B3 InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 0. def /AngleB 90. def /ArmA 0.0 def /ArmB 10.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 593 2795 a Fa(The)22 b Fb(;AND)i
Fa(continues)d(execution)i(of)g(TESTB.)f(The)h(second)f
Fb(MAKE)i Fa(redirects)f(BIFF.)p 3376 2879 4 1162 v 515
2882 2865 4 v 515 2935 V 515 3507 4 572 v 593 3068 a
Fb(SAM)k Fa(2)g(ok)p 786 3081 179 4 v 593 3167 a Fb(BIFF)g
Fa(3)g(ok)p 783 3180 V 593 3317 a(Tw)n(o)i Fb(DOER)j
Fa(w)n(o)n(rds)d(have)i(b)r(een)g(redirected)g(at)g(the)g(same)f(time)h
(b)n(y)g(the)f(single)g(w)n(o)n(rd)593 3416 y(TESTB.)d(SAM's)g(co)r(de)
g(stops)g(at)h Fb(;AND)p Fa(.)g(BIFF's)g(co)r(de)f(stops)g(at)h
(semicolon.)p 3376 3507 4 572 v 515 3510 2865 4 v 0 TeXcolorgray
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
